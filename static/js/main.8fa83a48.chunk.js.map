{"version":3,"sources":["fetch.js","components/Menu.jsx","components/Datapoint.jsx","components/Canvas.jsx","serviceWorker.js","index.js"],"names":["Menu","props","toggleMenu","menu","document","getElementById","style","display","className","id","textAlign","width","href","color","class","onClick","type","placeholder","name","jumboElement","React","Component","data","i","obj","key","x","Math","random","y","push","edges","first","second","Datapoint","marginTop","parseInt","this","marginLeft","drawDatapoint","p5","noStroke","fill","ellipse","stroke","drawEdge","strokeWeight","node1","find","val","index","node2","line","nodeIntract","length","distance","sqrt","alpha","map","adjustEdges","geometricEdge","start","vx","vy","end","sqLength","edge","theta","atan","accel","cos","abs","sign","sin","forEach","in_val","repelNode","geometricData","current","other","sqDist","corresponding","origin","mouseDragged","mouseIsPressed","pmouseX","mouseX","pmouseY","mouseY","redraw","Canvas","setup","canvasParentRef","window","innerWidth","height","innerHeight","createCanvas","parent","draw","background","translate","element","noFill","circle","Boolean","location","hostname","match","Datapoints","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8fa83a48.chunk.js","sourcesContent":["let data = [];\nfor(let i = 0; i< 10; i++){\n    const obj = {\n        key : i + 1,\n        x : Math.random()*1000,\n        y : Math.random()*800,\n    }\n    data.push(obj);\n}\n\nlet edges = [\n    {\n        key : 1,\n        first : 1,\n        second : 2,\n    },\n    {\n        key : 2,\n        first : 1,\n        second : 2,\n    },\n    {\n        key : 3,\n        first : 7,\n        second : 3,\n    },\n    {\n        key : 4,\n        first : 8,\n        second : 10,\n    },\n    {\n        key : 5,\n        first : 6,\n        second : 4,\n    },\n    {\n        key : 6,\n        first : 2,\n        second : 9,\n    },\n    {\n        key : 7,\n        first : 5,\n        second : 1,\n    },\n    {\n        key : 8,\n        first : 3,\n        second : 4,\n    }\n];\n\n\nexport {\n    data,\n    edges,\n};","import React from 'react';\nimport './MenuStyle.css';\n\nexport default class Menu extends React.Component {\n\n    \n    render(props){\n        let toggleMenu = () => {\n            let menu = document.getElementById(\"menuCard\");\n            if(menu.style.display === \"flex\"){\n                menu.style.display = \"none\";\n            }\n            else{\n                menu.style.display = \"flex\";\n            }\n        }\n\n        let jumbo = () => {\n            toggleMenu();\n            let jumboElement = document.getElementById(\"jumbo\");\n            document.getElementById(\"menuButton\").style.display = \"none\";\n            jumboElement.style.display = \"flex\";\n        }\n\n        let closeJumbo = () => {\n            let jumboElement = document.getElementById(\"jumbo\");\n            jumboElement.style.display = \"none\";\n            document.getElementById(\"menuButton\").style.display = \"flex\";\n        }\n\n        return (\n            <div className=\"menu\">\n                <div className = \"about\" id = \"jumbo\">\n                    <h1>Thanks for visiting!!</h1>\n                    <p style = {{textAlign: \"center\", width: 800,}}>\n                        Hey user, thank you for checking out this page.\n                        I made this App to visualise my online connection with people with the help of Facebook Graph API.<br /><br />\n\n                        I came up with an interesting problem of sparsing the graph to make it more readable, I used simulation to spread the nodes.\n                        I assumed edges to be ideal springs with nodes as weights which with damping come to desired edge length\n                        then to attain proper position of Nodes I used repulsion amoung Nodes.<br /><br />\n\n                        I encountered a lot of security restrictions from Facebook Graph API (which has a positive side as well), that barred \n                        the access to friends list, and I could not see a way out. There's no easy way out (you can't access profiles who liked a post and etc).<br /><br />\n\n                        So the project had to be left incomplete. All the forms are dead XO. Just for fun I added 10 nodes which will spawn a new position after every reload.<br /><br />\n\n                        Again, Thanks for visiting my App.<br />\n                        <a href = \"https://github.com/Shikhar03Stark\" style={{color: \"white\"}}> Visit My GitHub </a><br />\n                        Shikhar Vishwakarma<br />\n\n                    </p>\n                    <button class = \"closeJumbo\" onClick = {closeJumbo}>Close</button>\n                </div>\n                <div className=\"menu-display\" id=\"menuCard\">\n                    <div className = \"menu-display-info\">\n                        Connect Social Media\n                    </div>\n                    <div className = \"menu-display-form\">\n                        <input type=\"email\" placeholder=\"email@example.com\" name=\"email\" />&nbsp;\n                        <input type = \"password\" placeholder=\"Password\" name=\"password\" />\n                    </div>\n                    <div className = \"menu-display-mediaButton\">\n                        <button id = \"facebook\">Facebook</button>\n                        <button id = \"instagram\" onClick={jumbo}>About</button>\n                    </div>\n                </div>\n                <button className = \"menu-button\" id = \"menuButton\" onClick={toggleMenu}>Menu</button>\n            </div>\n        );\n    }\n};","import React from 'react';\nimport './DatapointStyle.css';\n\nexport default class Datapoint extends React.Component{\n\n    render(props){\n        return (\n            <div className = \"datapoint\" style = {{marginTop: parseInt(this.props.y), marginLeft: parseInt(this.props.x),}}>\n                <div className= \"beacon-outter\"><div className=\"beacon-inner\"><div className=\"beacon-inner-inner\">&nbsp;</div></div></div >\n            </div>\n        );\n    }\n};","import React from 'react';\nimport Sketch from 'react-p5';\nimport './CanvasStyle.css';\nimport {data, edges} from '../fetch';\n\n\nfunction drawDatapoint (p5, x, y){\n    p5.noStroke();\n    p5.fill(255, 189, 135);\n    p5.ellipse(x, y, 20, 20);\n\n    p5.fill(255, 148, 60);\n    p5.ellipse(x, y, 12, 12);\n\n    p5.fill(250, 118, 11);\n    p5.ellipse(x, y, 6, 6);\n\n    p5.stroke(255);\n}\n\nfunction drawEdge(p5, first, second){\n    p5.stroke(\"#ffcbc5\");\n    p5.strokeWeight(1);\n    const node1 = data.find((val, index)=>{\n        return (val.key === first);\n    });\n    const node2 = data.find((val, index)=>{\n        return (val.key === second);\n    }); \n    p5.line(node1.x, node1.y, node2.x, node2.y);\n}\n\nfunction nodeIntract(p5, x, y){\n    const thresRadius = 300;\n    for(let i = 0; i<data.length; i++){\n        let distance = (data[i].x - x)**2 + (data[i].y - y)**2 + 0.0;\n        if(distance <= thresRadius**2){\n            distance = Math.sqrt(distance);\n            const alpha = p5.map(distance, 0, thresRadius, 1, 0);\n            //console.log(alpha);\n            p5.stroke(`rgba(255, 165, 0,${alpha})`);\n            p5.line(x, y, data[i].x, data[i].y);\n        }\n    }\n}\n\nfunction adjustEdges(p5){\n    //fetch edges object with key as end points\n    let geometricEdge = [];\n    for(let i = 0; i<edges.length; i++){\n        let obj = {\n            key : edges[i].key,\n            start : {\n                x : data.find((val, index) => val.key === edges[i].first).x,\n                y : data.find((val, index) => val.key === edges[i].first).y,\n                vx : 0,\n                vy : 0,\n            },\n            end : {\n                x : data.find((val, index) => val.key === edges[i].second).x,\n                y : data.find((val, index) => val.key === edges[i].second).y,\n                vx : 0,\n                vy : 0,\n            },\n        }\n        let sqLength = (obj.start.x - obj.end.x)**2 + (obj.start.y - obj.end.y)**2;\n        obj.sqLength = sqLength;\n        geometricEdge.push(obj);\n    }\n\n    const orignalLength = 200;\n    for(let i = 0; i<geometricEdge.length; i++){\n        let edge = geometricEdge[i];\n        let theta = Math.atan((edge.end.y - edge.start.y)/(edge.end.x - edge.start.x));\n        const k_m = 0.5;\n        //calc accel magnitude\n        const accel = k_m*(Math.sqrt(edge.sqLength) - orignalLength);\n        //start of edge\n        //update velocity\n        edge.start.vx += accel * Math.cos(Math.abs(theta)) * Math.sign(edge.end.x - edge.start.x);\n        edge.start.vy += accel * Math.sin(Math.abs(theta)) * Math.sign(edge.end.y - edge.start.y);\n\n        //update positions\n        edge.start.x += edge.start.vx;\n        edge.start.y += edge.start.vy;\n\n        //end of edge\n        //update velocity\n        /*edge.end.vx -= edge.start.vx;\n        edge.end.vy -= edge.start.vy;*/\n        edge.end.vx += accel * Math.cos(Math.abs(theta)) * Math.sign(edge.start.x - edge.end.x);\n        edge.end.vy += accel * Math.sin(Math.abs(theta)) * Math.sign(edge.start.y - edge.end.y);\n        //update positions\n        edge.end.x += edge.end.vx;\n        edge.end.y += edge.end.vy;\n    }\n\n    //update edges and nodes\n    geometricEdge.forEach((val, index) => {\n       let edge = edges.find((in_val, index) => in_val.key === val.key);\n       let node1 = data.find((in_val, index) => in_val.key === edge.first);\n       let node2 = data.find((in_val, index) => in_val.key === edge.second);\n\n       node1.x = val.start.x;\n       node1.y = val.start.y;\n\n       node2.x = val.end.x;\n       node2.y = val.end.y;\n    })\n}\n\nfunction repelNode(p5){\n    let geometricData = [];\n    for(let i = 0; i<data.length; i++){\n        let obj = {\n            key : data[i].key,\n            x : data[i].x,\n            y : data[i].y,\n            vx : 0,\n            vy : 0,\n        }\n\n        geometricData.push(obj);\n    }\n\n    const repelConstant = 3000;\n    const thresRadius = 199;\n    for(let i = 0; i<geometricData.length; i++){\n        const current = geometricData[i];\n        geometricData.forEach((other, index) => {\n            if(other.key !== current.key){\n                const sqDist = (current.x - other.x)**2 + (current.y - other.y)**2;\n                if(sqDist <= thresRadius**2){\n                    const accel = repelConstant/(1 + sqDist);\n                    const theta = Math.atan((other.y - current.y) / (other.x - current.x));\n                    \n                    //update velocities\n                    current.vx += accel * Math.cos(Math.abs(theta)) * Math.sign(current.x - other.x);\n                    current.vy += accel * Math.sin(Math.abs(theta)) * Math.sign(current.y - other.x);\n                    //update positions\n                    current.x += current.vx;\n                    current.y += current.vy;\n                }\n            }\n        });\n    }\n\n    data.forEach((val, index) => {\n        const corresponding = geometricData.find((in_val, index) => in_val.key === val.key);\n        val.x = corresponding.x;\n        val.y = corresponding.y;\n    });\n}\nlet origin = {\n    x : 0,\n    y : 0,\n}\nfunction mouseDragged(p5){\n    if(p5.mouseIsPressed){\n        origin.x += -p5.pmouseX + p5.mouseX;\n        origin.y += -p5.pmouseY + p5.mouseY;\n        p5.redraw();\n    }\n}\n\nexport default class Canvas extends React.Component{\n\n    setup = (p5, canvasParentRef) => {\n        const width = 96*window.innerWidth/100;\n        const height = 95*window.innerHeight/100;\n        p5.createCanvas(width, height).parent(canvasParentRef);\n    }\n\n    draw = (p5) => {\n        p5.background(0, 80);\n        //assume edges as springs with damping\n        adjustEdges(p5);\n        repelNode(p5);\n        mouseDragged(p5);\n        p5.translate(origin.x, origin.y);\n        edges.forEach(element => {\n            drawEdge(p5, element.first, element.second);\n        });\n        data.forEach(element => {\n            drawDatapoint(p5, element.x, element.y);\n        });\n        nodeIntract(p5, p5.mouseX - origin.x, p5.mouseY - origin.y);\n        p5.noFill();\n        p5.circle(p5.mouseX - origin.x, p5.mouseY - origin.y, 2);\n\n    }\n\n    render(props){\n        return (\n            <div className=\"canvas\">\n                <Sketch setup = {this.setup} draw = {this.draw} />\n                <div className=\"playground\">\n                </div>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Menu from './components/Menu';\nimport {data} from './fetch';\nimport Datapoint from './components/Datapoint';\nimport Canvas from './components/Canvas';\nimport * as serviceWorker from './serviceWorker';\n//import './engine';\n\nlet Datapoints = data.map((val, index) => {\n  return (\n    <Datapoint key = {data[index].key} x = {data[index].x} y = {data[index].y} />\n  );\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Menu />\n    <Canvas>\n      {Datapoints}\n    </Canvas>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}